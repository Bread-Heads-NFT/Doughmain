/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { findAssociatedTokenPda } from '@metaplex-foundation/mpl-toolbox';
import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findEscrowPda } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type FeedSplTokenV1InstructionAccounts = {
  /** The address of the asset being fed */
  asset: PublicKey | Pda;
  /** The address of the VPet collection */
  collection: PublicKey | Pda;
  /** The PDA of the virtual pet from the asset */
  escrow?: PublicKey | Pda;
  /** The address of the SPL Token mint */
  mint: PublicKey | Pda;
  /** The address of the SPL Token account of the feeder */
  feederAta?: PublicKey | Pda;
  /** The address of the SPL Token account of the asset */
  escrowAta?: PublicKey | Pda;
  /** The address of the feeder */
  feeder: PublicKey | Pda;
  /** The global signer for the program */
  programSigner?: PublicKey | Pda;
  /** The MPL Core program */
  mplCoreProgram?: PublicKey | Pda;
  /** The system program */
  systemProgram?: PublicKey | Pda;
  /** The SPL Token program */
  tokenProgram?: PublicKey | Pda;
  /** The associated token program */
  associatedTokenProgram?: PublicKey | Pda;
};

// Data.
export type FeedSplTokenV1InstructionData = {
  discriminator: number;
  amount: bigint;
};

export type FeedSplTokenV1InstructionDataArgs = { amount: number | bigint };

export function getFeedSplTokenV1InstructionDataSerializer(): Serializer<
  FeedSplTokenV1InstructionDataArgs,
  FeedSplTokenV1InstructionData
> {
  return mapSerializer<
    FeedSplTokenV1InstructionDataArgs,
    any,
    FeedSplTokenV1InstructionData
  >(
    struct<FeedSplTokenV1InstructionData>(
      [
        ['discriminator', u8()],
        ['amount', u64()],
      ],
      { description: 'FeedSplTokenV1InstructionData' }
    ),
    (value) => ({ ...value, discriminator: 3 })
  ) as Serializer<
    FeedSplTokenV1InstructionDataArgs,
    FeedSplTokenV1InstructionData
  >;
}

// Args.
export type FeedSplTokenV1InstructionArgs = FeedSplTokenV1InstructionDataArgs;

// Instruction.
export function feedSplTokenV1(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: FeedSplTokenV1InstructionAccounts & FeedSplTokenV1InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'bglDough',
    'DoUGHq9k3qhPtu1kioX3tJTGQDdHq5ENE3cAYTJBihsM'
  );

  // Accounts.
  const resolvedAccounts = {
    asset: {
      index: 0,
      isWritable: true as boolean,
      value: input.asset ?? null,
    },
    collection: {
      index: 1,
      isWritable: true as boolean,
      value: input.collection ?? null,
    },
    escrow: {
      index: 2,
      isWritable: true as boolean,
      value: input.escrow ?? null,
    },
    mint: { index: 3, isWritable: false as boolean, value: input.mint ?? null },
    feederAta: {
      index: 4,
      isWritable: true as boolean,
      value: input.feederAta ?? null,
    },
    escrowAta: {
      index: 5,
      isWritable: true as boolean,
      value: input.escrowAta ?? null,
    },
    feeder: {
      index: 6,
      isWritable: true as boolean,
      value: input.feeder ?? null,
    },
    programSigner: {
      index: 7,
      isWritable: false as boolean,
      value: input.programSigner ?? null,
    },
    mplCoreProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.mplCoreProgram ?? null,
    },
    systemProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 11,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: FeedSplTokenV1InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.escrow.value) {
    resolvedAccounts.escrow.value = findEscrowPda(context, {
      asset: expectPublicKey(resolvedAccounts.asset.value),
    });
  }
  if (!resolvedAccounts.feederAta.value) {
    resolvedAccounts.feederAta.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.mint.value),
      owner: expectPublicKey(resolvedAccounts.feeder.value),
    });
  }
  if (!resolvedAccounts.escrowAta.value) {
    resolvedAccounts.escrowAta.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.mint.value),
      owner: expectPublicKey(resolvedAccounts.escrow.value),
    });
  }
  if (!resolvedAccounts.programSigner.value) {
    resolvedAccounts.programSigner.value = publicKey(
      '8rNE2yecH6AsLVpSPmbUE2UTCcQDhzah9rab6kW1iENy'
    );
  }
  if (!resolvedAccounts.mplCoreProgram.value) {
    resolvedAccounts.mplCoreProgram.value = context.programs.getPublicKey(
      'mplCore',
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
    );
    resolvedAccounts.mplCoreProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value = publicKey(
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getFeedSplTokenV1InstructionDataSerializer().serialize(
    resolvedArgs as FeedSplTokenV1InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
