/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type CrankV1InstructionAccounts = {
  /** The address of the asset that will host the Dough Pet */
  asset: PublicKey | Pda;
  /** The address of the collection with a LinkedAppData for Dough Pets */
  collection: PublicKey | Pda;
  /** The payer for additional rent */
  payer?: Signer;
  /** The program signer which is writing to the Dough Pet */
  programSigner?: PublicKey | Pda;
  /** The MPL Core program */
  mplCoreProgram?: PublicKey | Pda;
  /** The system program */
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CrankV1InstructionData = { discriminator: number };

export type CrankV1InstructionDataArgs = {};

export function getCrankV1InstructionDataSerializer(): Serializer<
  CrankV1InstructionDataArgs,
  CrankV1InstructionData
> {
  return mapSerializer<CrankV1InstructionDataArgs, any, CrankV1InstructionData>(
    struct<CrankV1InstructionData>([['discriminator', u8()]], {
      description: 'CrankV1InstructionData',
    }),
    (value) => ({ ...value, discriminator: 2 })
  ) as Serializer<CrankV1InstructionDataArgs, CrankV1InstructionData>;
}

// Instruction.
export function crankV1(
  context: Pick<Context, 'payer' | 'programs'>,
  input: CrankV1InstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'bglDough',
    'DoUGHq9k3qhPtu1kioX3tJTGQDdHq5ENE3cAYTJBihsM'
  );

  // Accounts.
  const resolvedAccounts = {
    asset: {
      index: 0,
      isWritable: true as boolean,
      value: input.asset ?? null,
    },
    collection: {
      index: 1,
      isWritable: true as boolean,
      value: input.collection ?? null,
    },
    payer: {
      index: 2,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    programSigner: {
      index: 3,
      isWritable: false as boolean,
      value: input.programSigner ?? null,
    },
    mplCoreProgram: {
      index: 4,
      isWritable: false as boolean,
      value: input.mplCoreProgram ?? null,
    },
    systemProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.programSigner.value) {
    resolvedAccounts.programSigner.value = publicKey(
      '8rNE2yecH6AsLVpSPmbUE2UTCcQDhzah9rab6kW1iENy'
    );
  }
  if (!resolvedAccounts.mplCoreProgram.value) {
    resolvedAccounts.mplCoreProgram.value = context.programs.getPublicKey(
      'mplCore',
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
    );
    resolvedAccounts.mplCoreProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCrankV1InstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
