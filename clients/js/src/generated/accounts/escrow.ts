/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  publicKey as publicKeySerializer,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';

export type Escrow = Account<EscrowAccountData>;

export type EscrowAccountData = { data: Uint8Array };

export type EscrowAccountDataArgs = EscrowAccountData;

export function getEscrowAccountDataSerializer(): Serializer<
  EscrowAccountDataArgs,
  EscrowAccountData
> {
  return struct<EscrowAccountData>([['data', bytes()]], {
    description: 'EscrowAccountData',
  }) as Serializer<EscrowAccountDataArgs, EscrowAccountData>;
}

export function deserializeEscrow(rawAccount: RpcAccount): Escrow {
  return deserializeAccount(rawAccount, getEscrowAccountDataSerializer());
}

export async function fetchEscrow(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Escrow> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Escrow');
  return deserializeEscrow(maybeAccount);
}

export async function safeFetchEscrow(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Escrow | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeEscrow(maybeAccount) : null;
}

export async function fetchAllEscrow(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Escrow[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Escrow');
    return deserializeEscrow(maybeAccount);
  });
}

export async function safeFetchAllEscrow(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Escrow[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeEscrow(maybeAccount as RpcAccount));
}

export function getEscrowGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'bglDough',
    'DoUGHq9k3qhPtu1kioX3tJTGQDdHq5ENE3cAYTJBihsM'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ data: Uint8Array }>({ data: [0, bytes()] })
    .deserializeUsing<Escrow>((account) => deserializeEscrow(account));
}

export function findEscrowPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The address of the asset */
    asset: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'bglDough',
    'DoUGHq9k3qhPtu1kioX3tJTGQDdHq5ENE3cAYTJBihsM'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('escrow'),
    publicKeySerializer().serialize(seeds.asset),
  ]);
}

export async function fetchEscrowFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findEscrowPda>[1],
  options?: RpcGetAccountOptions
): Promise<Escrow> {
  return fetchEscrow(context, findEscrowPda(context, seeds), options);
}

export async function safeFetchEscrowFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findEscrowPda>[1],
  options?: RpcGetAccountOptions
): Promise<Escrow | null> {
  return safeFetchEscrow(context, findEscrowPda(context, seeds), options);
}
