//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct FeedSplTokenV1 {
    /// The address of the asset being fed
    pub asset: solana_program::pubkey::Pubkey,
    /// The address of the VPet collection
    pub collection: solana_program::pubkey::Pubkey,
    /// The PDA of the virtual pet from the asset
    pub escrow: solana_program::pubkey::Pubkey,
    /// The address of the SPL Token mint
    pub mint: solana_program::pubkey::Pubkey,
    /// The address of the SPL Token account of the feeder
    pub feeder_ata: solana_program::pubkey::Pubkey,
    /// The address of the SPL Token account of the asset
    pub escrow_ata: solana_program::pubkey::Pubkey,
    /// The address of the feeder
    pub feeder: solana_program::pubkey::Pubkey,
    /// The global signer for the program
    pub program_signer: solana_program::pubkey::Pubkey,
    /// The MPL Core program
    pub mpl_core_program: solana_program::pubkey::Pubkey,
    /// The system program
    pub system_program: solana_program::pubkey::Pubkey,
    /// The SPL Token program
    pub token_program: solana_program::pubkey::Pubkey,
    /// The associated token program
    pub associated_token_program: Option<solana_program::pubkey::Pubkey>,
}

impl FeedSplTokenV1 {
    pub fn instruction(
        &self,
        args: FeedSplTokenV1InstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: FeedSplTokenV1InstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.asset, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.collection,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrow,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.feeder_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrow_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.feeder,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program_signer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mpl_core_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        if let Some(associated_token_program) = self.associated_token_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                associated_token_program,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BGL_DOUGH_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = FeedSplTokenV1InstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::BGL_DOUGH_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct FeedSplTokenV1InstructionData {
    discriminator: u8,
}

impl FeedSplTokenV1InstructionData {
    fn new() -> Self {
        Self { discriminator: 3 }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct FeedSplTokenV1InstructionArgs {
    pub amount: u64,
}

/// Instruction builder for `FeedSplTokenV1`.
///
/// ### Accounts:
///
///   0. `[writable]` asset
///   1. `[writable]` collection
///   2. `[writable]` escrow
///   3. `[]` mint
///   4. `[writable]` feeder_ata
///   5. `[writable]` escrow_ata
///   6. `[writable]` feeder
///   7. `[optional]` program_signer (default to `8rNE2yecH6AsLVpSPmbUE2UTCcQDhzah9rab6kW1iENy`)
///   8. `[optional]` mpl_core_program (default to `CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d`)
///   9. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   11. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
#[derive(Default)]
pub struct FeedSplTokenV1Builder {
    asset: Option<solana_program::pubkey::Pubkey>,
    collection: Option<solana_program::pubkey::Pubkey>,
    escrow: Option<solana_program::pubkey::Pubkey>,
    mint: Option<solana_program::pubkey::Pubkey>,
    feeder_ata: Option<solana_program::pubkey::Pubkey>,
    escrow_ata: Option<solana_program::pubkey::Pubkey>,
    feeder: Option<solana_program::pubkey::Pubkey>,
    program_signer: Option<solana_program::pubkey::Pubkey>,
    mpl_core_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl FeedSplTokenV1Builder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The address of the asset being fed
    #[inline(always)]
    pub fn asset(&mut self, asset: solana_program::pubkey::Pubkey) -> &mut Self {
        self.asset = Some(asset);
        self
    }
    /// The address of the VPet collection
    #[inline(always)]
    pub fn collection(&mut self, collection: solana_program::pubkey::Pubkey) -> &mut Self {
        self.collection = Some(collection);
        self
    }
    /// The PDA of the virtual pet from the asset
    #[inline(always)]
    pub fn escrow(&mut self, escrow: solana_program::pubkey::Pubkey) -> &mut Self {
        self.escrow = Some(escrow);
        self
    }
    /// The address of the SPL Token mint
    #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }
    /// The address of the SPL Token account of the feeder
    #[inline(always)]
    pub fn feeder_ata(&mut self, feeder_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.feeder_ata = Some(feeder_ata);
        self
    }
    /// The address of the SPL Token account of the asset
    #[inline(always)]
    pub fn escrow_ata(&mut self, escrow_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.escrow_ata = Some(escrow_ata);
        self
    }
    /// The address of the feeder
    #[inline(always)]
    pub fn feeder(&mut self, feeder: solana_program::pubkey::Pubkey) -> &mut Self {
        self.feeder = Some(feeder);
        self
    }
    /// `[optional account, default to '8rNE2yecH6AsLVpSPmbUE2UTCcQDhzah9rab6kW1iENy']`
    /// The global signer for the program
    #[inline(always)]
    pub fn program_signer(&mut self, program_signer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program_signer = Some(program_signer);
        self
    }
    /// `[optional account, default to 'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d']`
    /// The MPL Core program
    #[inline(always)]
    pub fn mpl_core_program(
        &mut self,
        mpl_core_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.mpl_core_program = Some(mpl_core_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    /// The system program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// The SPL Token program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account]`
    /// The associated token program
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.associated_token_program = associated_token_program;
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = FeedSplTokenV1 {
            asset: self.asset.expect("asset is not set"),
            collection: self.collection.expect("collection is not set"),
            escrow: self.escrow.expect("escrow is not set"),
            mint: self.mint.expect("mint is not set"),
            feeder_ata: self.feeder_ata.expect("feeder_ata is not set"),
            escrow_ata: self.escrow_ata.expect("escrow_ata is not set"),
            feeder: self.feeder.expect("feeder is not set"),
            program_signer: self.program_signer.unwrap_or(solana_program::pubkey!(
                "8rNE2yecH6AsLVpSPmbUE2UTCcQDhzah9rab6kW1iENy"
            )),
            mpl_core_program: self.mpl_core_program.unwrap_or(solana_program::pubkey!(
                "CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program,
        };
        let args = FeedSplTokenV1InstructionArgs {
            amount: self.amount.clone().expect("amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `feed_spl_token_v1` CPI accounts.
pub struct FeedSplTokenV1CpiAccounts<'a, 'b> {
    /// The address of the asset being fed
    pub asset: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the VPet collection
    pub collection: &'b solana_program::account_info::AccountInfo<'a>,
    /// The PDA of the virtual pet from the asset
    pub escrow: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the SPL Token mint
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the SPL Token account of the feeder
    pub feeder_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the SPL Token account of the asset
    pub escrow_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the feeder
    pub feeder: &'b solana_program::account_info::AccountInfo<'a>,
    /// The global signer for the program
    pub program_signer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The MPL Core program
    pub mpl_core_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The SPL Token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The associated token program
    pub associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `feed_spl_token_v1` CPI instruction.
pub struct FeedSplTokenV1Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the asset being fed
    pub asset: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the VPet collection
    pub collection: &'b solana_program::account_info::AccountInfo<'a>,
    /// The PDA of the virtual pet from the asset
    pub escrow: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the SPL Token mint
    pub mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the SPL Token account of the feeder
    pub feeder_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the SPL Token account of the asset
    pub escrow_ata: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address of the feeder
    pub feeder: &'b solana_program::account_info::AccountInfo<'a>,
    /// The global signer for the program
    pub program_signer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The MPL Core program
    pub mpl_core_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The system program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The SPL Token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The associated token program
    pub associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: FeedSplTokenV1InstructionArgs,
}

impl<'a, 'b> FeedSplTokenV1Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: FeedSplTokenV1CpiAccounts<'a, 'b>,
        args: FeedSplTokenV1InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            asset: accounts.asset,
            collection: accounts.collection,
            escrow: accounts.escrow,
            mint: accounts.mint,
            feeder_ata: accounts.feeder_ata,
            escrow_ata: accounts.escrow_ata,
            feeder: accounts.feeder,
            program_signer: accounts.program_signer,
            mpl_core_program: accounts.mpl_core_program,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.asset.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collection.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrow.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.feeder_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrow_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.feeder.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program_signer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mpl_core_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        if let Some(associated_token_program) = self.associated_token_program {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *associated_token_program.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::BGL_DOUGH_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = FeedSplTokenV1InstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::BGL_DOUGH_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.asset.clone());
        account_infos.push(self.collection.clone());
        account_infos.push(self.escrow.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.feeder_ata.clone());
        account_infos.push(self.escrow_ata.clone());
        account_infos.push(self.feeder.clone());
        account_infos.push(self.program_signer.clone());
        account_infos.push(self.mpl_core_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        if let Some(associated_token_program) = self.associated_token_program {
            account_infos.push(associated_token_program.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `FeedSplTokenV1` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` asset
///   1. `[writable]` collection
///   2. `[writable]` escrow
///   3. `[]` mint
///   4. `[writable]` feeder_ata
///   5. `[writable]` escrow_ata
///   6. `[writable]` feeder
///   7. `[]` program_signer
///   8. `[]` mpl_core_program
///   9. `[]` system_program
///   10. `[]` token_program
///   11. `[optional]` associated_token_program
pub struct FeedSplTokenV1CpiBuilder<'a, 'b> {
    instruction: Box<FeedSplTokenV1CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> FeedSplTokenV1CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(FeedSplTokenV1CpiBuilderInstruction {
            __program: program,
            asset: None,
            collection: None,
            escrow: None,
            mint: None,
            feeder_ata: None,
            escrow_ata: None,
            feeder: None,
            program_signer: None,
            mpl_core_program: None,
            system_program: None,
            token_program: None,
            associated_token_program: None,
            amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The address of the asset being fed
    #[inline(always)]
    pub fn asset(&mut self, asset: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.asset = Some(asset);
        self
    }
    /// The address of the VPet collection
    #[inline(always)]
    pub fn collection(
        &mut self,
        collection: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collection = Some(collection);
        self
    }
    /// The PDA of the virtual pet from the asset
    #[inline(always)]
    pub fn escrow(
        &mut self,
        escrow: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrow = Some(escrow);
        self
    }
    /// The address of the SPL Token mint
    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }
    /// The address of the SPL Token account of the feeder
    #[inline(always)]
    pub fn feeder_ata(
        &mut self,
        feeder_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.feeder_ata = Some(feeder_ata);
        self
    }
    /// The address of the SPL Token account of the asset
    #[inline(always)]
    pub fn escrow_ata(
        &mut self,
        escrow_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrow_ata = Some(escrow_ata);
        self
    }
    /// The address of the feeder
    #[inline(always)]
    pub fn feeder(
        &mut self,
        feeder: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.feeder = Some(feeder);
        self
    }
    /// The global signer for the program
    #[inline(always)]
    pub fn program_signer(
        &mut self,
        program_signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_signer = Some(program_signer);
        self
    }
    /// The MPL Core program
    #[inline(always)]
    pub fn mpl_core_program(
        &mut self,
        mpl_core_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mpl_core_program = Some(mpl_core_program);
        self
    }
    /// The system program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    /// The SPL Token program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// `[optional account]`
    /// The associated token program
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.associated_token_program = associated_token_program;
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = FeedSplTokenV1InstructionArgs {
            amount: self.instruction.amount.clone().expect("amount is not set"),
        };
        let instruction = FeedSplTokenV1Cpi {
            __program: self.instruction.__program,

            asset: self.instruction.asset.expect("asset is not set"),

            collection: self.instruction.collection.expect("collection is not set"),

            escrow: self.instruction.escrow.expect("escrow is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            feeder_ata: self.instruction.feeder_ata.expect("feeder_ata is not set"),

            escrow_ata: self.instruction.escrow_ata.expect("escrow_ata is not set"),

            feeder: self.instruction.feeder.expect("feeder is not set"),

            program_signer: self
                .instruction
                .program_signer
                .expect("program_signer is not set"),

            mpl_core_program: self
                .instruction
                .mpl_core_program
                .expect("mpl_core_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self.instruction.associated_token_program,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct FeedSplTokenV1CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collection: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    feeder_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    feeder: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program_signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mpl_core_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
